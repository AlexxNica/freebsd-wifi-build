#!/bin/sh

SCRIPT_NAME="`basename $0`"
SCRIPT_DIR="`dirname $0`"
CUR_DIR="`pwd`"

# suck in the per-device options
CFGNAME=$1
shift
. ${SCRIPT_DIR}/../cfg/${CFGNAME} || exit 1

# include the config variable generation code
. ${SCRIPT_DIR}/../lib/cfg.sh || exit 1

# This builds a redboot system image from the given kernel and MFS.

# The kernel file needs to be padded to a 64k boundary or although the
# mkfwimage tool will accept it, the urescue program in the redboot
# loader won't!

echo "X_KERNEL: ${X_KERNEL}"
cat ${X_KERNEL} | gzip -9 | dd if=/dev/stdin of=${X_KERNEL}.gz bs=64k conv=sync

# Create a 64k (empty) config file image
dd if=/dev/zero of=${X_CFGFS} bs=1k count=64

# Filesystem image is created by "build_fsimage"

${SCRIPT_DIR}/../../programs/ubnt-mkfwimage/mkfwimage	\
    -B ${UBNT_ARCH} -v ${UBNT_VERSION} -k ${X_KERNEL}.gz \
    -C ${BIN_CFG_SIZE} -c ${X_CFGFS} -r ${X_FSIMAGE}${X_FSIMAGE_SUFFIX} \
    -o /tftpboot/${KERNCONF}.initial.img
